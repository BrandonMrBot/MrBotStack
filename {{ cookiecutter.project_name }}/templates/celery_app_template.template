from celery import Celery
import configparser
from pkg_resources import iter_entry_points
from {{ cookiecutter.project_name }}.config import celery_config
import logging

log = logging.getLogger(__name__)

{{ cookiecutter.project_name|upper }}_INI_FILE = '{{cookiecutter.project_name|upper +"_INI_FILE" }}'

TASKS_ENTRY_POINT_GROUP = '{{ cookiecutter.project_name }}.tasks'
PLUGINS_ENTRY_POINT_GROUP = '{{ cookiecutter.project_name }}.plugins'

def just_a_warning():
    ''' This file has been generated by configure_celery
        You should not need to edit this file, however if you
        are moving the installation of {{ cookiecutter.project_name }} to another directory
        then you either need to call again configure_celery or
        edit the {{ cookiecutter.project_name|upper }}_INI_FILE so it points to the new path
    '''

def get_ini_value(key,default=None):
    """try:
        with open({{ cookiecutter.project_name|upper }}_INI_FILE) as f:
            config_file = f.read()
        config = configparser.RawConfigParser(allow_no_value=True)
        #config.readfp(io.BytesIO(config_file))
        config.read_file(io.BytesIO(config_file))
        return config.get('app:{{ cookiecutter.project_name }}', key)
    except:
        return default
    """
    try:
        config = configparser.ConfigParser()
        config.read({{ cookiecutter.project_name|upper }}_INI_FILE)
        return config.get("app:{{ cookiecutter.project_name }}", key)
    except Exception as e:
        log.info("Warning: Unable to find key {}. {}. Default used".format(key, str(e)))
        return default

def getTasks():
    tasks = []
    plugins = get_ini_value(PLUGINS_ENTRY_POINT_GROUP, '').split()
    for plugin in plugins:
        if isinstance(plugin, str):
            iterator = iter_entry_points(
                group=TASKS_ENTRY_POINT_GROUP,
                name=plugin
            )
            entry_point = next(iterator, None)
            if entry_point:
                tasks.append(entry_point.module_name)
    return tasks

celeryApp = Celery(get_ini_value('celery.taskname'), broker=get_ini_value('celery.broker'), backend=get_ini_value('celery.backend'),include=getTasks())
celeryApp.config_from_object(celery_config)